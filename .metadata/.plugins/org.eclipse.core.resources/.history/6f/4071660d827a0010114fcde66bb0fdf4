package com.wipro.gp.controller;

import com.wipro.gp.entities.Payment;
import com.wipro.gp.exception.PaymentNotFoundException;
import com.wipro.gp.services.PaymentService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.ratelimiter.annotation.RateLimiter;
import io.github.resilience4j.retry.annotation.Retry;
import lombok.extern.slf4j.Slf4j;

import org.springframework.web.bind.annotation.*;

@Slf4j
@RestController
@RequestMapping("/api/v1/payments")
public class PaymentController {

    private final PaymentService paymentService;

    public PaymentController(PaymentService paymentService) {
        this.paymentService = paymentService;
    }

    @CircuitBreaker(name = "addPaymentFromPayment", fallbackMethod = "addPaymentFallback")
	@Retry(name = "addRecordFallback")
	@RateLimiter(name = "addRecordFallback")
    @PostMapping("/save")
    public Payment processPayment(@RequestBody Payment payment) {
    	log.info("Received request to add a patient details");
        return paymentService.processPayment(payment);
    }
    
    public Payment addPaymentFallback(Payment payment, Throwable t) {
		throw new PaymentNotFoundException("Service temporarily unavailable: " + t.getMessage());
	}

    @GetMapping("/{id}")
    public Payment getPayment(@PathVariable Long id) {
        return paymentService.getPaymentById(id);
    }
}
