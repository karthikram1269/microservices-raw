package com.wipro.gp.services;

import com.wipro.gp.dto.*;
import com.wipro.gp.entities.MedicalRecord;
import com.wipro.gp.exception.MedicalRecordNotFoundException;
import com.wipro.gp.feign.AppointmentClient;
import com.wipro.gp.feign.PatientClient;
import com.wipro.gp.feign.DoctorClient;
import com.wipro.gp.repo.MedicalRecordRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;

@Service
@RequiredArgsConstructor
public class MedicalRecordServiceImpl implements MedicalRecordService {

    private final MedicalRecordRepository repository;
    private final AppointmentClient appointmentClient;
    private final PatientClient patientClient;
    private final DoctorClient doctorClient;

    @Override
    public MedicalRecordResponse addRecordFromAppointment(Long appointmentId, String prescription, MultipartFile file) throws IOException {
        AppointmentDTO appointment = appointmentClient.getAppointmentById(appointmentId);
        if (appointment == null) {
            throw new MedicalRecordNotFoundException("Appointment not found with id: " + appointmentId);
        }

        String filePath = null;
        if (file != null && !file.isEmpty()) {
            String uploadDir = "uploads/";
            File dir = new File(uploadDir);
            if (!dir.exists()) dir.mkdirs();
            filePath = uploadDir + file.getOriginalFilename();
            file.transferTo(new File(filePath));
        }

        MedicalRecord record = new MedicalRecord();
        record.setAppointmentId(appointmentId);
        record.setPatientId(appointment.getPatientId());
        record.setDoctorId(appointment.getDoctorId());
        record.setPrescription(prescription);
        record.setFilePath(filePath);

        MedicalRecord savedRecord = repository.save(record);

        // Fetch full patient & doctor info
        PatientDTO patient = patientClient.getPatientById(savedRecord.getPatientId());
        DoctorDTO doctor = doctorClient.getDoctorById(savedRecord.getDoctorId());

        return new MedicalRecordResponse(savedRecord, patient, doctor);
    }
}
