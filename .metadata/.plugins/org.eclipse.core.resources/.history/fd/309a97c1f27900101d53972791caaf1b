package com.wipro.gp.controller;

import com.wipro.gp.entities.Appointment;
import com.wipro.gp.exception.AppointmentNotFoundException;
import com.wipro.gp.services.AppointmentService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.ratelimiter.annotation.RateLimiter;
import io.github.resilience4j.retry.annotation.Retry;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

@RequiredArgsConstructor
@RestController
@RequestMapping("/api/v1/appointments")
public class AppointmentController {

	private final AppointmentService service;

	@CircuitBreaker(name = "bookAppointment", fallbackMethod = "bookFallback")
	@Retry(name = "bookAppointment")
	@RateLimiter(name = "bookAppointment")
	@PostMapping("/add")
	public Appointment bookAppointment(@Valid @RequestBody Appointment appointment) {
		return service.bookAppointment(appointment);
	}

	public Appointment bookFallback(Appointment appointment, Throwable t) {
		throw new AppointmentNotFoundException("Service temporarily unavailable: " + t.getMessage());
	}

	@GetMapping("/{id}")
	public Appointment getAppointment(@PathVariable Long id) {
		return service.getAppointment(id);
	}

	@GetMapping("/patient/{patientId}")
	public Appointment getByPatientId(@PathVariable Long patientId) {
		return service.getAppointmentsByPatientId(patientId);
	}
	
	@GetMapping("/doctor/{doctorId}")
	public Appointment getByDoctorId(@PathVariable Long doctorId) {
		return service.getAppointmentsByDoctorId(doctorId);
	}
	
	@PutMapping("/{id}/reschedule")
	public Appointment reschedule(@PathVariable Long id, Appointment appointment) {
		return service.rescheduleAppointment(id, appointment);
	}

	@DeleteMapping("/{id}")
	public void cancel(@PathVariable Long id) {
		service.cancelAppointment(id);
	}
}
