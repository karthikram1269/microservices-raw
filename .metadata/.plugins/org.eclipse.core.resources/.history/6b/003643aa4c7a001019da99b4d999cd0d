package com.wipro.gp.controller;

import com.wipro.gp.dto.MedicalRecordResponse;
import com.wipro.gp.entities.MedicalRecord;
import com.wipro.gp.exception.MedicalRecordNotFoundException;
import com.wipro.gp.services.MedicalRecordService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.ratelimiter.annotation.RateLimiter;
import io.github.resilience4j.retry.annotation.Retry;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@RestController
@RequestMapping("/api/v1/records")
@RequiredArgsConstructor
public class MedicalRecordController {

    private final MedicalRecordService service;

    @CircuitBreaker(name = "addRecordFromAppointment", fallbackMethod = "addRecordFallback")
	@Retry(name = "addRecordFallback")
	@RateLimiter(name = "addRecordFallback")
    @PostMapping("/from-appointment/{appointmentId}")
    public MedicalRecordResponse addRecordFromAppointment(@Valid
            @PathVariable Long appointmentId,
            @RequestParam String description,
            @RequestParam(required = false) MultipartFile file) throws IOException {
        return service.addRecordFromAppointment(appointmentId, description, file);
    }
    
    public MedicalRecord bookFallback(MedicalRecord record, Throwable t) {
		throw new MedicalRecordNotFoundException("Service temporarily unavailable: " + t.getMessage());
	}
}
