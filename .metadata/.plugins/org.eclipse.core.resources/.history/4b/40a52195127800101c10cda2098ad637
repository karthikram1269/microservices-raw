# ================================
# Application Info
# ================================
spring.application.name=DOCTOR-SERVICE
server.port=8089

#jpa:hibernate: ddl-auto: updateshow-sql: true
#server: port: 8081
#management:endpoints:web:exposure:include:"*"
#feign:hystrix:enabled:true


# swagger-ui custom path
springdoc.swagger-ui.path=/swagger-ui.html


# /api-docs endpoint custom path
springdoc.api-docs.path=/api-docs

# Config Server URL
spring.config.import=optional:configserver:http://localhost:9092


# ================================
# Eureka Client Config
# ================================
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=localhost
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

# ================================
# MySQL Database Config
# ================================
spring.datasource.url=jdbc:mysql://localhost:3306/doctor_service_db?useSSL=false&serverTimezone=UTC
#createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=KaDB@1269

# ================================
# JPA / Hibernate Config
# ================================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# ================================
# Logging
# ================================
logging.file.name=logs/app.log




logging.level.io.github.resilience4j.circuitbreaker=DEBUG
logging.level.io.github.resilience4j.retry=DEBUG






# ================================
# Actuator & Circuit Breaker Health
# ================================
 #Turns on a “health check” for circuit breakers.
management.health.circuitbreakers.enabled=true
#Makes the /actuator/health endpoint accessible over HTTP.
management.endpoints.web.exposure.include=health
#Always show detailed info in /actuator/health instead of just saying "status": "UP".
management.endpoint.health.show-details=always


management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
# Log pattern to include traceId and spanId from MDC
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg [%X{traceId} %X{spanId}]%n


# ================================
# Resilience4j Circuit Breaker Defaults
# ================================


#Registers the circuit breaker with Spring Boot’s health system so Actuator can monitor it.
resilience4j.circuitbreaker.configs.default.register-health-indicator=true
#The breaker looks at the last 10 calls to decide whether to open or stay closed.
resilience4j.circuitbreaker.configs.default.sliding-window-size=10
#Don’t judge the service until at least 5 calls have been made.
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5
#When the breaker is HALF_OPEN, only let 3 test calls go through before deciding if the service is healthy again.
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state=3
#The breaker will automatically try again after a wait time — you don’t have to manually reset it.
resilience4j.circuitbreaker.configs.default.automatic-transition-from-open-to-half-open-enabled=true
#If the breaker is OPEN, wait 5 seconds before testing again.
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=5s
# If 50% or more of the calls fail in the window, the breaker will OPEN.
resilience4j.circuitbreaker.configs.default.failure-rate-threshold=50
#Keep the last 10 events (success, failure, state changes) in memory for logging and monitoring.
resilience4j.circuitbreaker.configs.default.event-consumer-buffer-size=10






# ================================
# Resilience4j Retry Defaults
# ================================
resilience4j.retry.configs.default.max-attempts=3
    
  # Retry max 3 times before failing
resilience4j.retry.configs.default.wait-duration=2s
  
      # Wait 2 seconds between retries
resilience4j.retry.configs.default.retry-exceptions=java.io.IOException,java.util.concurrent.TimeoutException 
 # Retry only on these exceptions




# ================================
# Resilience4j Rate Limiter Defaults
# ================================
resilience4j.ratelimiter.configs.default.limit-for-period=5
   # Max 5 calls allowed per refresh period
resilience4j.ratelimiter.configs.default.limit-refresh-period=10s

  # Refresh period for rate limiter is 10 seconds
  resilience4j.ratelimiter.configs.default.timeout-duration=1s
   # Wait max 1 second to acquire permission before failing